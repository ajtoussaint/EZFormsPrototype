
@using EZFormsPrototype.Models; 

@model EZFormsPrototype.ViewModels.FillableForm

@{
    ViewBag.Title = "Fillable";
}

<h2>@Model.Form.Title</h2>
<p>@Model.Form.Description</p>

<form action="/Form/FinalResult" method="post">
    @Html.HiddenFor(ModelItem => Model.Form.Title)
    @Html.HiddenFor(ModelItem => Model.Form.Description)
    @foreach (Field field in Model.Fields)
    {
        <div>
            <h3>@Html.DisplayFor(ModelItem => field.Name)</h3>
            <input type=@(field.Type) name=@(field.Name) id=@("Field" + field.ID) />
            @foreach(Flag flag in Model.Flags)
            {
                //TODO: might be better to bundle these on the controller similar to how the Expression Blocks work
                if(flag.FieldID == field.ID)
                {
                    <div id=@("Flag" + flag.ID) class="d-none">
                        <h4>@flag.Name</h4>
                        <p>@flag.Message</p>
                    </div>
                }
            }
        </div>
    }
    <div>
        <input type="submit" value="Submit" class="btn btn-default" />
    </div>

</form>
<div>
    @Html.ActionLink("Back", "Index")
</div>

@section Scripts
{
    <script>
        @foreach(Field field in Model.Fields)
        {
            <text>
            //runs every time the field is updated
            $("@("#Field"+ field.ID)").change(function () {
                alert("@("a change has been made to field: " + field.Name)");
                //run the flag function for each flag that has a depdnecy on this field
               @{ 
                   HashSet<int> flagIDs = new HashSet<int>();
                   foreach(Flag flag in Model.Flags)
                   {
                       foreach(ExpressionBlock block in flag.ExpressionBlocks)
                        {
                           if(block.DependantFieldID1 == field.ID || block.DependantFieldID2 == field.ID)
                            {
                               flagIDs.Add(flag.ID);
                            }
                        }
                   }
               }
                @foreach(int flagID in flagIDs)
                {
                   <text>
                    @("updateFlag" + flagID + "();")
                   </text>
                }
            })
            </text>
        }
        @foreach(Flag flag in Model.Flags)
        {
            <text>
                function updateFlag@(flag.ID)() {
                    alert("@("updating flag: " + flag.Name)");
                    //get the current value for each field referenced in the flag
                    @{string expression = "";}
                    @foreach (ExpressionBlock block in flag.ExpressionBlocks)
                    {
                        if(block.DependantFieldID1 != 0) {
                            <text>
                            var @("DField1of" + block.ID.ToString()) = $("@("#Field" + block.DependantFieldID1)").val();
                            </text>
                        }
                        if(block.DependantFieldID2 != 0)
                        {
                            <text>
                            var @("DField2of" + block.ID.ToString()) = $("@("#Field" + block.DependantFieldID2)").val();
                            </text>
                        }
                        //TODO: might be able to preformat this replace string depening on how I code the above
                        expression += block.CodeExpression.Replace("#" + block.DependantFieldID1, "DField1of" + block.ID.ToString()).Replace("#" + block.DependantFieldID2, "DField2of" + block.ID.ToString());
                    }
                    //evaluate the flag expression
                    //TODO: expressions are puttin &gt; in the jquery instead of >
                    //var result = @(expression);
                    //if the expression evaluates to TRUE remove d-none class
                    if(true){
                        $("@("#Flag" + flag.ID)").attr("class", "");
                    } else {
                        $("@("#Flag" + flag.ID)").attr("class", "d-none");
                    }
                    //else add the dnone class to the div
                }
            </text>
        }

    </script>
}


