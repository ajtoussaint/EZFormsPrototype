
@using EZFormsPrototype.Models; 
@using System.Text.RegularExpressions

@model EZFormsPrototype.ViewModels.FillableForm

@{
    ViewBag.Title = "Fillable";
}

<h2>@Model.Form.Title</h2>
<p>@Model.Form.Description</p>

<form action="/Form/FinalResult/@(Model.Form.ID)" method="post" id="fillableForm">
    @foreach (FormField field in Model.Fields)
    {
        <div>
            <h3>@Html.DisplayFor(ModelItem => field.Name)</h3>
            @if (field.Type != "table")
            {
                <text>
                    @if (field.Type == "dollarAmount"){<text>$</text>}<input type=@(field.Type) name=@(field.ID) id=@("Field" + field.ID) />
                </text>
            }
            else
            {
                //for table fields create an extensible table
                <text>
                    <table id=@("Field" + field.ID)>
                        <tr>
                    @foreach(TableField tf in field.TableFields)
                    {
                            <text>
                            <th>@(tf.Name)</th>
                            </text>
                    } 
                        </tr>
                        <tr>
                    @foreach (TableField tf in field.TableFields)
                    {
                        <text>
                            <td>
                               <input type="@(tf.Type)" name="@(tf.ID)" class="@("Field" + tf.ID)" />
                            </td>
                        </text>
                    }
                            <td>
                                <button type="button" value="_@(field.ID)_" class="removeRow btn btn-danger">X</button>
                            </td>
                        </tr>
                    </table>
                    <button type="button" value="_@(field.ID)_" class="addRow btn btn-info">Add Row to Table</button>
                </text>
            }

            @foreach (Flag flag in Model.Flags)
            {
                if (flag.FieldID == field.ID)
                {
                    <div id=@("Flag" + flag.ID) class="d-none">
                        <div class="@flag.Level" style="background:@(flag.Level == "warning" ? "orange" : "indianred"); padding:0.4em; border:solid; border-radius:5px; margin-top:1em;">
                            <h4>@flag.Name</h4>
                            <p>@flag.Message</p>
                            <input type="text" name=@(flag.ID) id="flagResponse" />
                        </div>
                    </div>
                }
            }
        </div>
    }
    <div>
        <input type="submit" value="Submit" class="btn btn-default" />
    </div>

</form>
<div>
    @Html.ActionLink("Back", "Index")
</div>

@section Scripts
{
    <script>
        //define comparison functions
        let devMode = false;
        function _gt(f1, f2) {
            return parseInt(f1) > parseInt(f2);
        }

        function _lt(f1, f2) {
            return parseInt(f1) < parseInt(f2);
        }

        function _gte(f1, f2){
            return parseInt(f1) >= parseInt(f2);
        }

        function _lte(f1, f2) {
            return parseInt(f1) <= parseInt(f2);
        }

        function _equals(f1, f2) {
            return f1 == f2;
        }

        function _notEquals(f1, f2) {
            return f1 != f2;
        }

        function _isEmpty(f1) {
            return !f1;
        }

        function _like(f1, f2) {
            var regex = new RegExp("^" + f2.replace("%", "[A-Za-z0-9]") + "$", "ig");
            return regex.test(f1);
        }

        function _contains(f1, f2) {
            var regex = new RegExp(f2, "ig");
            return regex.test(f1);
        }

        function _notLike(f1, f2) {
            return !_like(f1, f2);
        }

        function _doesNotContain (f1, f2){
            return !contains(f1, f2);
        }

        //define comparison type functions
        function _single(func, f1, f2) {
            if (f2 === null) {
                return func(f1);
            } else {
                return func(f1, f2);
            }
        }

        function _any(func, f1, f2) {
            //when any is called f1 will be a jquery selection of objects whose class match the desired ID
            var res = false;
            f1.each(function () {
                var result = false
                if (f2 === null) {
                    result = func($(this).val());
                } else {
                    result = func($(this).val(), f2);
                }
                res = res || result
            })

            return res;
        }

        function _none(func, f1, f2) {
            return !_any(func, f1, f2);
        }

        function _all(func, f1, f2) {
            var res = true;
            f1.each(function () {
                var result;
                if (f2 === null) {
                    result = func($(this).val());
                } else {
                    result = func($(this).val(), f2);
                }
                res = res && result
            })

            return res;
        }

        @foreach(FormField field in Model.Fields)
        {
            if (field.Type != "table")
            {
                <text>
                //runs every time the field is updated
                $("@("#Field" + field.ID)").change(function () {
                    if(devMode)
                        alert("@("a change has been made to field: " + field.Name)");
                    //run the flag function for each flag that has a depdnecy on this field and is checked at data entry
                    @foreach (int flagID in field.DependentFlagIDs)
                    {
                       <text>
                        @("updateFlag" + flagID + "();")
                       </text>
                    }
                })
                </text>
            }
        }

        //define functions that run when a table function is updated and the jquery calls to those functions on normal update

        @foreach(TableField tf in Model.TableFields)
    {
        <text>
            function updateField@(tf.ID)() {
                if(devMode)
                    alert("a change has been made to a table field: @(tf.Name)");
                @foreach(int flagID in tf.DependentFlagIDs)
                {
                    <text>
                     @("updateFlag" + flagID + "();")
                    </text>
                }
            }
            $(document).on('change', ".Field@(tf.ID)", updateField@(tf.ID));
        </text>
    }



        @foreach (Flag flag in Model.Flags)
        {
            <text>
                function updateFlag@(flag.ID)() {
                    //alert("@("updating flag: " + flag.Name)");
                    //get the current value for each field referenced in the flag
                    @foreach (int id in flag.DependantFieldIDs)
                    {
                        <text>
                            @(Html.Raw("var _" + id + "_ = ($(\"#Field" + id + "\").length ? $(\"#Field" + id + "\").val() : $(\".Field" + id +"\"));"))
                        </text>
                    }
                    //evaluate the flag expression
                    @{ string expression = String.Join(" ", flag.CodeExpressions);
                       if(expression.Length <= 0)
                        {
                            expression = "true";
                        }
                     }
                    var result = @(Html.Raw(expression));
                    //if the expression evaluates to TRUE remove d-none class
                    if(result){
                        $("@("#Flag" + flag.ID)").attr("class", "");
                    } else {
                        //else add the dnone class to the div
                        $("@("#Flag" + flag.ID)").attr("class", "d-none");
                    }

                }
            </text>
        }



        $("#fillableForm").on("submit", function (e) {
            //update all flags before submitting
            @foreach (Flag flag in Model.Flags)
            {
               <text>
                @("updateFlag" + flag.ID + "();")
               </text>
            }
            //if there is a visible flag with no response prevent submitting
            var allowSubmission = true;
            $("[id^=Flag]").each(function () {
                if (!this.className && $(this).find("input").val() == "") {
                    allowSubmission = false;
                }
            })
            if (!allowSubmission)
                alert("Please satisfy or respond to all flags");
            return allowSubmission;
        })

    //define row html for each field of type table to be added as a new row
        var html_rows = {}
        var tableFields = {}
   @foreach(FormField field in Model.Fields.Where(f => f.Type == "table"))
    {
            <text>
        var html = "";
        tableFields["_@(field.ID)_"] = [];
            </text>
           foreach(TableField tf in field.TableFields)
            {
               <text>
                     html += "<td><input type=\"@(tf.Type)\" name=\"@(tf.ID)\" class=\"@("Field" + tf.ID)\" </td>";
                    tableFields["_@(field.ID)_"].push(updateField@(tf.ID));
                </text>
            }
            <text>
        html += "<td><button type=\"button\" value=\"_@(field.ID)_\" class=\"removeRow btn btn-danger\">X</button></td>";
        html_rows["_@(field.ID)_"] = html;
            </text>
    }

        $(".addRow").on('click', function () {
            //add a row to the table associated with this button
            $("#Field" + $(this).val().match(/\d+/)[0]).append("<tr>" + html_rows[$(this).val()] + "</tr>");
        })

        $(document).on('click', '.removeRow', function () {
            $(this).parent().parent().remove();
            tableFields[$(this).val()].forEach(func => {
                func();
            })
        })



    </script>
}



