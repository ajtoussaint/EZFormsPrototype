
@using EZFormsPrototype.Models; 
@using System.Text.RegularExpressions

@model EZFormsPrototype.ViewModels.FillableForm

@{
    ViewBag.Title = "Fillable";
}

<h2>@Model.Form.Title</h2>
<p>@Model.Form.Description</p>

<form action="/Form/FinalResult" method="post" id="fillableForm">
    @Html.HiddenFor(ModelItem => Model.Form.Title)
    @Html.HiddenFor(ModelItem => Model.Form.Description)
    @foreach (Field field in Model.Fields)
    {
        <div>
            <h3>@Html.DisplayFor(ModelItem => field.Name)</h3>
            @if (field.Type == "dollarAmount") {<text>$</text>}<input type=@(field.Type) name=@(field.Name) id=@("Field" + field.ID) />
            @foreach(Flag flag in Model.Flags)
            {
                //TODO: might be better to bundle these on the controller similar to how the Expression Blocks work
                if(flag.FieldID == field.ID)
                {
                    <div id=@("Flag" + flag.ID) class="d-none">
                        <h4>@flag.Name</h4>
                        <p>@flag.Message</p>
                        <input type="text" name=@("flagResponse"+flag.ID) id="flagResponse"/>
                    </div>
                }
            }
        </div>
    }
    <div>
        <input type="submit" value="Submit" class="btn btn-default" />
    </div>

</form>
<div>
    @Html.ActionLink("Back", "Index")
</div>

@section Scripts
{
    <script>
        //define comparison functions
        
        function _gt(f1, f2) {
            return f1 > f2;
        }

        function _lt(f1, f2) {
            return f1 < f2;
        }

        function _gte(f1, f2){
            return f1 >= f2;
        }

        function _lte(f1, f2) {
            return f1 <= f2;
        }

        function _equals(f1, f2) {
            return f1 == f2;
        }

        function _notEquals(f1, f2) {
            return f1 != f2;
        }

        function _isEmpty(f1) {
            return !f1;
        }

        //define comparison type functions
        function _single(func, f1, f2) {
            if (f2 === null) {
                return func(f1);
            } else {
                return func(f1, f2);
            }
        }

        @foreach(Field field in Model.Fields)
        {
            <text>
            //runs every time the field is updated
            $("@("#Field"+ field.ID)").change(function () {
                alert("@("a change has been made to field: " + field.Name)");
                //run the flag function for each flag that has a depdnecy on this field
                @foreach(int flagID in field.DependentFlagIDs)
                {
                   <text>
                    @("updateFlag" + flagID + "();")
                   </text>
                }
            })
            </text>
        }
        @foreach (Flag flag in Model.Flags)
        {
            <text>
                function updateFlag@(flag.ID)() {
                    //alert("@("updating flag: " + flag.Name)");
                    //get the current value for each field referenced in the flag
                    @foreach (int id in flag.DependantFieldIDs)
                    {
                        <text>
                            @(Html.Raw("var _" + id + "_ = $(\"#Field" + id + "\").val();"))
                        </text>
                    }
                    //evaluate the flag expression
                    @{ string expression = String.Join(" ", flag.CodeExpressions);
                       if(expression.Length <= 0)
                        {
                            expression = "true";
                        }
                     }
                    var result = @(Html.Raw(expression));
                    //if the expression evaluates to TRUE remove d-none class
                    if(result){
                        $("@("#Flag" + flag.ID)").attr("class", "");
                    } else {
                        //else add the dnone class to the div
                        $("@("#Flag" + flag.ID)").attr("class", "d-none");
                    }
                    
                }
            </text>
        }

        

        $("#fillableForm").on("submit", function (e) {
            //if there is a visible flag with no response prevent submitting
            var allowSubmission = true;
            $("[id^=Flag]").each(function () {
                if (!this.className && $(this).find("input").val() == "") {
                    alert("Please satisfy or respond to all flags");
                    allowSubmission = false;
                }
            })
            return allowSubmission;
        })

    </script>
}


