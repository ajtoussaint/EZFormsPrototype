@model EZFormsPrototype.Models.FormField

@{
    ViewBag.Title = "Create";
}

<h2>Create Field for @ViewBag.ParentTitle</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Field</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
                @Html.HiddenFor(model => model.FormID, new { Value = ViewBag.ParentID})
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Type", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="d-none" id="TableFields">
                <p>Each row in the table will have the following fields: </p>
                <input type="hidden" id="numColumns" value="0" />
                <table id="newRow">
                    <tr>
                        <th>Name: </th>
                        <th>Type: </th>
                        <th>Remove</th>
                    </tr>
                </table>
                <button id="addRow" type="button" class="btn btn-info">Add column to table</button>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to form", "ParentForm", new { id = ViewBag.ParentID })
</div>

@section Scripts
{
    <script>
        //TODO: find a better way to generate the dropdown here
        function addTableField() {
            var numColumns = parseInt($("#numColumns").val());
            numColumns++;
            $("#numColumns").val(numColumns);
            var html = '';
            html += '<tr id="inputRow">';
            //don't add [i] to the name of the input, this way it will be sent to the controller as List<string> TableFieldTypes rather than many separate values
            html += '<td> <input type="text" name="TableFieldNames" /> </td>';
            html += '<td>';
            html += '<select class="form-control" name="TableFieldTypes" >';
            html += '<option selected="selected" value="number">Number</option>';
            html += '<option value="text">Text</option>';
            html += '<option value="date">Date</option>';
            html += '<option value="time">Time</option>';
            html += '<option value="dateTime">Date Time</option>';
            html += '<option value="dollarAmount">Dollar Amount</option>';
            html += '</select>';
            html += '</td>';
            html += '<td>'
            html += '<button id="removeRow" type="button" class="btn btn-danger">Remove</button>';
            html += '</td>'
            html += '</tr>';
            $('#newRow').append(html);
        };
        $("#Type").change(function () {
            var type = $("#Type").val();
            var numColumns = parseInt($("#numColumns").val());
            if (type == "table") {
                if (numColumns == 0) {
                    addTableField();
                }
                $("#TableFields").attr('class', 'col-md-offset-2 col-md-10');
            } else {
                $("#TableFields").attr('class', 'd-none');
            }
        });
        
        $("#addRow").click(function () {
            addTableField();
        });
        $(document).on('click', '#removeRow', function () {
            var rowCount = parseInt($("#total").val());
            rowCount--;
            $("#total").val(rowCount);
            $(this).closest('#inputRow').remove();
        });
    </script>
}
