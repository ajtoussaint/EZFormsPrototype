@using EZFormsPrototype.Utility
@model EZFormsPrototype.Models.Flag

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>Flag</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Message, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Message, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Message, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Level, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("Level", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Level, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        Expression Builder:
        <table id="buildButtons" class="border">
            <tr>
                <th class="text-wrap">Select a Field to Evaluate</th>
                <th class="text-wrap">Select a Comparison</th>
                <th class="text-wrap">Select a field or Value to compare to</th>
            </tr>
            <tr>
                <td>
                    <select class="form-control-sm" id="blockField">
                        @foreach (var field in ViewBag.Fields)
                        {
                            //TODO: Select the field associated with this flag by default
                            <option type=@(field.Type) value=@("#" + field.ID)>@(field.Name)</option>
                        }
                    </select>
                </td>
                <td>
                    <select class="form-control-sm" id="blockComparison">
                        <option value=">">></option>
                        <option value="<"><</option>
                        <option value=">=">>=</option>
                        <option value="<="><=</option>
                        <option value="==">=</option>
                        <option value="!=">does not equal</option>
                    </select>
                </td>
                <td>
                    <select class="form-control-sm" id="blockField2">
                        @foreach (var field in ViewBag.Fields)
                        {
                            //TODO: come up with a way to identify the field ID within the string that cant be replicated in text input
                            <option value=@("#" + field.ID)>@(field.Name)</option>
                        }
                        <option value="#custom#">Custom</option>
                    </select>
                    <input type="hidden" id="customInput" />
                    <div id="invalidCustomInput" class="d-none alert-danger" >Input cannot contain specail characters: ' " / < > #</div>
                </td>
            </tr>
            <tr>
                <td>
                    <button type="submit" id="postBlock" class="btn btn-info">Add block</button>
                </td>
            </tr>
        </table>
        <div id="conjunctionButtons" class="border">
            <div>
                Conjunctions:
            </div>
            <div>
                <button type="submit" id="orConjunction" value="||" class="btn btn-info">Or</button>
                <button type="submit" id="andConjunction" value="&&" class="btn btn-info">And</button>
                <button type="submit" id="opConjunction" value="(" class="btn btn-info">(</button>
                <button type="submit" id="cpConjunction" value=")" class="btn btn-info">)</button>
            </div>
        </div>
        <div>
            The flag will appear to the user when the expression below is TRUE
            <div id="expressionSpace">
                <input type="hidden" name="Order" value="1" />
                @foreach(var block in ViewBag.ExpressionBlocks)
                {
                    <div class=expressionBlock>
                        <div>@(block.ViewExpression)</div>
                        <button id="removeBlock" type="submit" class="btn btn-danger" value="@(block.ID)">X</button>
                    </div>
                }
            </div>
        </div>
    </div>



    <div class="form-group">
        @Html.HiddenFor(model => model.FieldID, new { Value = Model.FieldID })
    </div>

    <div class="form-group">
        @Html.HiddenFor(model => model.FormID, new { Value = Model.FormID })
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to field", "ParentField", new { id = Model.FieldID })
</div>

@section Scripts{
    <script>
        $("#postBlock").click(function () {
            //TODO: Sanitize user input for text

            //add html that represents the block to the expressionSpace so it will be posted to the action result for processing
            //The block has a hidden input with the expression value
            var blockField = $("#blockField").val();
            var blockFieldName = $("#blockField").find(":selected").text();
            var blockComparison = $("#blockComparison").val();
            var blockComparisonName = $("#blockComparison").find(":selected").text();
            var blockField2
            var blockFieldName2
            var custom = $("#blockField2").find(":selected").val() == "#custom#";
            if (custom) {
                blockField2 = $("#customInput").val();
                if (/['"#<>\/]/.test(blockField2)) {
                    $("#invalidCustomInput").attr('class', '.text-danger');
                    //prevents posting
                    return false;
                }
                blockFieldName2 = blockField2;
            } else {
                blockField2 = $("#blockField2").val();
                blockFieldName2 = $("#blockField2").find(":selected").text();
            }
            var html = '';
            html += '<div class=expressionBlock>'
            html += '<input type="hidden" name="CodeExpression" value ="' + blockField + " " + blockComparison + " " + blockField2 + ' " />';
            html += '<input type="hidden" name="ViewExpression" value ="' + blockFieldName + " " + blockComparisonName + " " + blockFieldName2 + ' " />';
            html += '<input type="hidden" name = "DependantFieldID1" value="' + blockField.match(/\d+/)[0] + '" />'
            if (!custom) {
                html += '<input type="hidden" name = "DependantFieldID2" value="' + blockField2.match(/\d+/)[0] + '" />'
            }
            html += '</div>'
            $("#expressionSpace").append(html);
            var action = $("form").attr("action");
            action = action.replace(/Flag\/[\w]+\//, "Flag/AddBlock/");
            $("form").attr("action", action);
        })

        $(document).on('click', '#removeBlock', function () {
            var id = $(this).val();
            var html = '';
            html += '<input type="hidden" name="BlockToRemove" value="' + id + '" />'
            $("#expressionSpace").append(html);
            var action = $("form").attr("action");
            action = action.replace(/Flag\/[\w]+\//, "Flag/RemoveBlock/");
            $("form").attr("action", action);
        });

        $("#orConjunction").click(function () {
            addConjunction(this);
        })
        $("#andConjunction").click(function () {
            addConjunction(this);
        })
        $("#opConjunction").click(function () {
            addConjunction(this);
        })
        $("#cpConjunction").click(function () {
            addConjunction(this);
        })

        $(document).ready(function () {
            toggleCustomInput();
        })

        $("#blockField2").change(function () {
            toggleCustomInput();
        })

        function toggleCustomInput() {
            var showInput = $("#blockField2").find(":selected").val() == "#custom#";
            if (showInput) {
                var type = $("#blockField").find(":selected").attr("type");
                $("#customInput").prop('type', type);
            } else {
                $("#customInput").prop('type', 'hidden');
            }
        }

        function addConjunction(element) {
            var code = $(element).val();
            var view = $(element).text();
            var html = '';
            html += '<div class=expressionBlock>'
            html += '<input type="hidden" name="CodeExpression" value="' + code + ' " />';
            html += '<input type="hidden" name="ViewExpression" value="' + view + ' " />';
            html += '</div>'
            $("#expressionSpace").append(html);
            var action = $("form").attr("action");
            action = action.replace(/Flag\/[\w]+\//, "Flag/AddBlock/");
            $("form").attr("action", action);
        }

    </script>
}