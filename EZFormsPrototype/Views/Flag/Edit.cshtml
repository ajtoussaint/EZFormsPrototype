@using EZFormsPrototype.Utility
@model EZFormsPrototype.Models.Flag

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>Flag</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Message, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Message, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Message, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Level, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("Level", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Level, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        Expression Builder:
        <table id="buildButtons" class="border">
            <tr>
                <th class="text-wrap">Select a Field to Evaluate</th>
                <th class="text-wrap">Select a Comparison</th>
                <th class="text-wrap">Select a field or Value to compare to</th>
            </tr>
            <tr>
                <td>
                    <select class="form-control-sm" id="blockField">
                        @foreach (var field in ViewBag.Fields)
                        {
                            //TODO: Select the field associated with this flag by default
                            <option type=@(field.Type) value=@("#Field" + field.ID)>@(field.Name)</option>
                        }
                    </select>
                </td>
                <td>
                    <select class="form-control-sm" id="blockComparison">
                        <option value=">">></option>
                        <option value="<"><</option>
                        <option value=">=">>=</option>
                        <option value="<="><=</option>
                        <option value="==">=</option>
                        <option value="!=">does not equal</option>
                    </select>
                </td>
                <td>
                    <select class="form-control-sm" id="blockField2">
                        @foreach (var field in ViewBag.Fields)
                        {
                            //TODO: come up with a way to identify the field ID within the string that cant be replicated in text input
                            <option value=@("#Field" + field.ID)>@(field.Name)</option>
                        }
                        <option value="#custom#">Custom</option>
                    </select>
                    <input type="hidden" id="customInput" />
                </td>
            </tr>
            <tr>
                <td>
                    <button type="button" id="addBlock" class="btn btn-info">Add block</button>
                </td>
            </tr>
        </table>
        <div>
            The flag will appear to the user when the expression below is TRUE
            <div id="expressionSpace">

            </div>
        </div>
    </div>



    <div class="form-group">
        @Html.HiddenFor(model => model.FieldID, new { Value = Model.FieldID })
    </div>

    <div class="form-group">
        @Html.HiddenFor(model => model.FormID, new { Value = Model.FormID })
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to field", "ParentField", new { id = Model.FieldID })
</div>

@section Scripts{
    <script>
        $("#addBlock").click(function () {
            //alert("adding");
            //add html that represents the block to the expressionSpace with a remove button
            //The block has a hidden input with the expression value
            var blockField = $("#blockField").val();
            var blockFieldName = $("#blockField").find(":selected").text();
            var blockComparison = $("#blockComparison").val();
            var blockComparisonName = $("#blockComparison").find(":selected").text();
            var blockField2
            var blockFieldName2
            var custom = $("#blockField2").find(":selected").val() == "#custom#";
            if (custom) {
                blockField2 = $("#customInput").val();
                blockFieldName2 = blockField2;
            } else {
                blockField2 = $("#blockField2").val();
                blockFieldName2 = $("#blockField2").find(":selected").text();
            }
            var html = '';
            html += '<div class=expressionBlock>'
            html += '<input type="hidden" name="FlagConditions" value ="' + blockField + " " + blockComparison + " " + blockField2 + ' " />';
            html += '<input type="hidden" name = "DependantFields" value="' + blockField.match(/\d+/)[0] + '" />'
            if (!custom) {
                html += '<input type="hidden" name = "DependantFields" value="' + blockField2.match(/\d+/)[0] + '" />'
            }
            html += '<div>' + blockFieldName + " " + blockComparisonName + " " + blockFieldName2 + " " + '</div>'
            html += '<button id="removeBlock" type="button" class="btn btn-danger">X</button>'
            html += '</div>'
            $("#expressionSpace").append(html);
        })

        $(document).on('click', '#removeBlock', function () {
            $(this).closest(".expressionBlock").remove();
        });

        $(document).ready(function () {
            toggleCustomInput();
        })

        $("#blockField2").change(function () {
            toggleCustomInput();
        })

        function toggleCustomInput() {
            var showInput = $("#blockField2").find(":selected").val() == "#custom#";
            if (showInput) {
                var type = $("#blockField").find(":selected").attr("type");
                $("#customInput").prop('type', type);
            } else {
                $("#customInput").prop('type', 'hidden');
            }
        }
    </script>
}