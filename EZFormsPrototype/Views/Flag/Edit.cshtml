@using EZFormsPrototype.Utility
@using EZFormsPrototype.Models
@model EZFormsPrototype.Models.Flag

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>Flag</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Message, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Message, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Message, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.appearsOnSubmit, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("appearsOnSubmit", null, htmlAttributes: new { @class = "form-control col-md-10" })
            @Html.ValidationMessageFor(model => model.Level, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Level, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("Level", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Level, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        Expression Builder:
        <table id="buildButtons" class="border">
            <tr>
                <th class="d-none" id="compTypeHeader">Select how table fields are analyzed</th>
                <th class="d-none" id="tableFieldHeader">Select table column</th>
                <th></th>
                <th class="text-wrap">Select a Field to Evaluate</th>
                <th class="text-wrap">Select a Comparison</th>
                <th class="text-wrap">Select a field or Value to compare to</th>
            </tr>
            <tr>
                <td class="d-none" id="compTypeColumn">
                    <select class="form-control-sm" id="compType">
                        <option value="_single" selected="selected" id="singleOption">Single</option>
                        <option value="_any">Any</option>
                        <option value="_all">All</option>
                        <option value="_none">None</option>
                    </select>
                </td>
                <td class="d-none" id="tableFieldColumn">
                    <select class="form-control-sm" id="tableField">
                        <!--populates with options when a table is selected-->
                    </select>
                </td>
                <td id="tableIn" class="d-none">
                    <div>
                        In:
                    </div>
                </td>
                <td>
                    <select class="form-control-sm" id="blockField">
                        @foreach (var field in ViewBag.Fields)
                        {
                            //TODO: Select the field associated with this flag by default
                            <option type=@(field.Type) value=@("_" + field.ID + "_")>@(field.Name)</option>
                        }
                    </select>
                </td>
                <td>
                    <select class="form-control-sm" id="blockComparison">
                        <option value="_gt">></option>
                        <option value="_lt"><</option>
                        <option value="_gte">>=</option>
                        <option value="_lte"><=</option>
                        <option value="_equals">=</option>
                        <option value="_notEquals">does not equal</option>
                        <option value="_isEmpty">is empty</option>
                        <option value="_like">matches the pattern:</option>
                        <option value="_contains">contains the text:</option>
                        <option value="_notLike">does not match the pattern:</option>
                        <option value="_doesNotContain">does not contain the text:</option>
                    </select>
                </td>
                <td>
                    <select class="form-control-sm" id="blockField2" recorded=true>
                        @foreach (var field in ViewBag.Fields)
                        {
                            if (field.Type != "table")
                            {
                                <option value=@("_" + field.ID + "_")>@(field.Name)</option>
                            }
                        }
                        <option value="#custom#" recorded=false>Custom</option>
                    </select>
                    <input type="hidden" id="customInput" />
                    <div id="likeTip" class="d-none">Use % as a wildcard, spaces matter</div>
                    <div id="invalidCustomInput" class="d-none alert-danger">Input cannot contain specail characters: ' " / < > # $ _</div>
                </td>
            </tr>
            <tr>
                <td>
                    <button type="submit" id="postBlock" class="btn btn-info">Add block</button>
                </td>
            </tr>
        </table>
        <div id="conjunctionButtons" class="border">
            <div>
                Conjunctions:
            </div>
            <div>
                <button type="submit" id="orConjunction" value="||" class="btn btn-info">Or</button>
                <button type="submit" id="andConjunction" value="&&" class="btn btn-info">And</button>
                <button type="submit" id="opConjunction" value="(" class="btn btn-info">(</button>
                <button type="submit" id="cpConjunction" value=")" class="btn btn-info">)</button>
            </div>
        </div>
        <div>
            The flag will appear to the user when the expression below is TRUE
            <div id="expressionSpace">
                <input checked="checked" id="newBlockOrder" type="radio" name="Order" value="@(ViewBag.ExpressionBlocks.Count != 0 ? ViewBag.ExpressionBlocks[0].Order - 1 : 50)" />
                @foreach (var block in ViewBag.ExpressionBlocks)
                {
                    <div class=expressionBlock>
                        <div>@(block.ViewExpression)</div>
                        <button id="removeBlock" type="submit" class="btn btn-danger" value="@(block.ID)">X</button>
                    </div>
                    <input id="newBlockOrder" type="radio" name="Order" value="@(block.Order + 1)" />
                }
            </div>
        </div>
    </div>



    <div class="form-group">
        @Html.HiddenFor(model => model.FieldID, new { Value = Model.FieldID })
    </div>

    <div class="form-group">
        @Html.HiddenFor(model => model.FormID, new { Value = Model.FormID })
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to field", "ParentField", new { id = Model.FieldID })
</div>

@section Scripts{
    <script>

        $("#postBlock").click(function () {
            //add html that represents the block to the expressionSpace so it will be posted to the action result for processing
            //The block has a hidden input with the expression value
            var blockField2;
            var blockFieldName2;

            if ($("#blockField2").attr("recorded") == "true") {
                blockField2 = $("#blockField2").val();
                blockFieldName2 = $("#blockField2").find(":selected").text();
            } else if ($("#customInput").attr("recorded") == "true") {
                blockField2 = $("#customInput").val();
                if (/['"#<>$_\/]/.test(blockField2)) {
                    $("#invalidCustomInput").attr('class', '.text-danger');
                    //prevents posting
                    return false;
                }
                blockFieldName2 = blockField2;
            } else {
                blockField2 = null;
                blockFieldName2 = null;
            }

            var blockField = $("#blockField").val();
            var blockFieldName = $("#blockField").find(":selected").text();
            var blockComparison = $("#blockComparison").val();
            var blockComparisonName = $("#blockComparison").find(":selected").text();
            var comparisonType = $("#compType").val();
            var tableField = $("#tableField").val();
            var tableFieldName = $("#tableField").find(":selected").text();

            var html = '';
            html += '<div class=expressionBlock>'
            var code = '<input type="hidden" name="CodeExpression" value ="' + comparisonType + '(' + blockComparison + ', ';
            code += (comparisonType != "_single" ? tableField : blockField);
            code += ', \'' + blockField2 + '\')" />';
            html += code;
            console.log(code);
            var view = '<input type="hidden" name="ViewExpression" value ="';
            if (comparisonType != "_single") {
                var comparisonTypeName = $("#compType").find(":selected").text();
                view += comparisonTypeName + " " + tableFieldName + " in ";
            }
            view += "" + blockFieldName + " " + blockComparisonName + " ";
            if (blockField2) {
                view += blockFieldName2;
            }
            view += ' " />';
            html += view;

            html += '<input type="hidden" name = "DependantFieldID1" value="' + (comparisonType != "_single" ? tableField : blockField).match(/\d+/)[0] + '" />'
            if (blockField2) {
                html += '<input type="hidden" name = "DependantFieldID2" value="' + (/_\d+_/.test(blockField2) ? blockField2.replace(/_(\d+)_/, "$1") : "0") + '" />'
            }
            html += '</div>'

            $("#expressionSpace").append(html);
            var action = $("form").attr("action");
            action = action.replace(/Flag\/[\w]+\//, "Flag/AddBlock/");
            $("form").attr("action", action);
        })

        $(document).on('click', '#removeBlock', function () {
            var id = $(this).val();
            var html = '';
            html += '<input type="hidden" name="BlockToRemove" value="' + id + '" />'
            $("#expressionSpace").append(html);
            var action = $("form").attr("action");
            action = action.replace(/Flag\/[\w]+\//, "Flag/RemoveBlock/");
            $("form").attr("action", action);
        });

        $("#orConjunction").click(function () {
            addConjunction(this);
        })
        $("#andConjunction").click(function () {
            addConjunction(this);
        })
        $("#opConjunction").click(function () {
            addConjunction(this);
        })
        $("#cpConjunction").click(function () {
            addConjunction(this);
        })

        $("#blockComparison").change(function () {
            //if the comparison is "like" show info on how to use
            toggleLikeTip();
            //remove the block Field2 Dropdown as it is not needed
            toggleBlockField2();
            //if the custom input box is up hide it
            toggleCustomInput();
        })

        $().ready(function () {
            toggleCustomInput();
            updateBlockComparisonList($("blockField").find(":selected").attr("type"));
        })

        $("#blockField2").change(function () {
            toggleCustomInput();
        })

        


        function updateBlockComparisonList(type) {
            if (!type) {
                alert("no type was given so the default was used");
                type = $("#blockField").find("option").attr("type")
            }
            if (type == 'table') {
                type = $("#tableFieldColumn").find(":selected").attr("type");
                if (!type) {
                    alert("default table");
                    type = $("#tableFieldColumn").find("option").attr("type")
                }
            }
            alert("update Type: " + type);
            var html = '';
            switch (type) {
                case "text":
                    html += '<option value="_like">matches the pattern:</option>< option value = "_contains" > contains the text:</option ><option value="_notLike">does not match the pattern:</option><option value="_doesNotContain">does not contain the text:</option>';
                    break;

                case "number":
                    html += '<option value="_gt">></option><option value="_lt"><</option><option value="_gte">>=</option><option value="_lte"><=</option><option value="_equals">=</option>'
                    break;
            }
            html += '<option value="_equals">=</option><option value="_notEquals">does not equal</option><option value="_isEmpty">is empty</option>';
            $("#blockComparison").html(html);
        }

        function toggleCustomInput() {
            var bf2 = $("#blockField2");
            var customInput = $("#customInput");
            var showInput = bf2.find(":selected").val() == "#custom#" &&  bf2.attr("class") != "d-none";
            if (showInput) {
                var type = $("#blockField").find(":selected").attr("type");
                bf2.attr("recorded", false);
                customInput.prop('type', type);
                customInput.attr("recorded", true);
            } else {
                if (bf2.attr("class") != "d-none") {
                    bf2.attr("recorded", true);
                }
                customInput.prop('type', 'hidden');
                customInput.attr("recorded", false);
            }
        }

        function toggleBlockField2() {
            var compVal = $("#blockComparison").find(":selected").val();
            var showBF2 = compVal != "_isEmpty";
            var bf2 = $("#blockField2");
            if (showBF2) {
                bf2.attr("class", "form-control-sm");
                bf2.attr("recorded", true);
                toggleCustomInput();
            } else {
                $("#customInput").attr("value", "");
                $("#invalidCustomInput").attr('class', 'd-none');
                bf2.attr("class", "d-none");
                bf2.attr("recorded", false);
                toggleCustomInput();
            }
        }

        function toggleLikeTip() {
            if ($("#blockComparison").val() == "_like") {
                $("#likeTip").attr("class", "");
            } else {
                $("#likeTip").attr("class", "d-none");
            }
        }

        function addConjunction(element) {
            var code = $(element).val();
            var view = $(element).text();
            var html = '';
            html += '<div class=expressionBlock>'
            html += '<input type="hidden" name="CodeExpression" value="' + code + ' " />';
            html += '<input type="hidden" name="ViewExpression" value="' + view + ' " />';
            html += '</div>'
            $("#expressionSpace").append(html);
            var action = $("form").attr("action");
            action = action.replace(/Flag\/[\w]+\//, "Flag/AddBlock/");
            $("form").attr("action", action);
        }

        $("#blockField").change(function () {
            alert("bfchange");
            var table = $(this).find(":selected")
            if (table.attr("type") == "table") {
                toggleTableControlls(parseInt(table.val().match(/\d+/)[0]))
            } else {
                toggleTableControlls(-1);
            }
            updateBlockComparisonList($(this).find(":selected").attr("type"));
        })

        $("#tableFieldColumn").on("change", function () {
            alert("tf change");
            updateBlockComparisonList("table");
        })

        //function to get table fields returns html options
        function getTableFields(tableID) {
            var html = '';
            switch (tableID) {
                @foreach(int id in new List<int>(ViewBag.tableFields.Keys))
                {
                    <text>
                        case @(id):
                        @foreach(TableField field in ViewBag.tableFields[id])
                        {
                            <text>
                                html += '<option type=@(field.Type) value=@("_" + field.ID + "_")>@(field.Name)</option>'
                            </text>
                        }
                        break;
                    </text>
                }
            }
            return html;
        }

        function toggleTableControlls(table) {
            var compHeader = $("#compTypeHeader");
            var fieldHeader = $("#tableFieldHeader");
            var compColumn = $("#compTypeColumn");
            var fieldColumn = $("#tableFieldColumn");
            var tableIn = $("#tableIn");
            if (table >= 0) {
                //show the two header columns and three cells
                compHeader.attr("class", "");
                fieldHeader.attr("class",  "");
                compColumn.attr("class",  "");
                fieldColumn.attr("class", "");
                tableIn.attr("class", "")
                //populate
                $("#tableField").append(getTableFields(table));
                //remove single option from dropdown
                $("#singleOption").remove();
            } else {
                //hide columns and cells
                compHeader.attr("class",  "d-none");
                fieldHeader.attr("class",  "d-none");
                compColumn.attr("class",  "d-none");
                fieldColumn.attr("class", "d-none");
                tableIn.attr("class", "d-none");
                //depopulate
                $("#tableField").empty();
                $("#compType").prepend('<option value="_single" selected="selected" id="singleOption">Single</option>');
            }
        }

    </script>
}